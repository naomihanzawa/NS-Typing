{"ast":null,"code":"var _jsxFileName = \"/Users/naomi/Desktop/naomi-ns-typing/src/Result.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from './Button.js';\nimport styled from 'styled-components'; //round=四捨五入しているという意味\n\nfunction Result({\n  setScreen,\n  beginTime,\n  missCount\n}) {\n  const [endTime, setEndTime] = useState('');\n\n  function handleClick() {\n    setScreen('start');\n  }\n\n  useEffect(() => {\n    let date = new Date();\n    setEndTime(date);\n  }, []);\n  let ms = endTime - beginTime;\n  let min = Math.floor(ms / 60000); //秒数 = 60000ミリ秒で割り1000(ミリ秒なので1000で掛ける)\n\n  let sec = Math.floor(ms % 60000 / 1000); //四捨五入されたミリ秒 = 135200ミリ秒を1000ミリ秒で割った数の余り\n\n  let roundMs = ms % 1000; //表示の際の桁数を固定する 例）3 => 03、12 => 12\n\n  min = ('0' + min).slice(-2);\n  sec = ('0' + sec).slice(-2);\n  roundMs = ('0' + roundMs).slice(-2);\n  let timer = min + ':' + sec + ':' + roundMs; //タイプスピード(１秒間にタイプできる数)＝ 10問を経過時間で割った数\n\n  let typeSpeed = 10 / sec;\n  let roundTypeSpeed = Math.round(typeSpeed * 10) / 10; //正確率 = 10問を、ミスタイプ数 + 正解数(10)で割り、100掛けて％表示\n\n  let accuracyRate = 10 / (missCount + 10) * 100;\n  let roundAccuracyRate = Math.round(accuracyRate * 10) / 10;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"result\",\n    style: {\n      color: \"white\",\n      fontSize: \"50px\",\n      fontWeight: \"800\",\n      margin: \"70px 0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, \"\\u7D50\\u679C\"), /*#__PURE__*/React.createElement(\"ul\", {\n    \"data-testid\": \"resultlist\",\n    style: {\n      color: \"white\",\n      fontSize: \"20px\",\n      textAlign: \"left\",\n      margin: \"30px 100px\",\n      display: \"inline-block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"\\u7D4C\\u904E\\u6642\\u9593: \", /*#__PURE__*/React.createElement(BlueText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }\n  }, timer)), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"\\u5E73\\u5747\\u30AD\\u30FC\\u30BF\\u30A4\\u30D7\\u6570: \", /*#__PURE__*/React.createElement(BlueText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 27\n    }\n  }, roundTypeSpeed), \"\\u56DE/\\u79D2\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"\\u30DF\\u30B9\\u30BF\\u30A4\\u30D7\\u6570: \", /*#__PURE__*/React.createElement(BlueText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 25\n    }\n  }, missCount)), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"\\u6B63\\u78BA\\u7387: \", /*#__PURE__*/React.createElement(BlueText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 22\n    }\n  }, roundAccuracyRate), \"%\")), /*#__PURE__*/React.createElement(Button, {\n    text: \"\\u30BF\\u30A4\\u30C8\\u30EB\\u306B\\u623B\\u308B\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }));\n}\n\nconst BlueText = styled.span`\n    color:#10639C;\n    font-weight:800;\n}`;\nexport default Result;","map":{"version":3,"sources":["/Users/naomi/Desktop/naomi-ns-typing/src/Result.js"],"names":["React","useState","useEffect","Button","styled","Result","setScreen","beginTime","missCount","endTime","setEndTime","handleClick","date","Date","ms","min","Math","floor","sec","roundMs","slice","timer","typeSpeed","roundTypeSpeed","round","accuracyRate","roundAccuracyRate","color","fontSize","fontWeight","margin","textAlign","display","BlueText","span"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AAEA,SAASC,MAAT,CAAiB;AAACC,EAAAA,SAAD;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA;AAAvB,CAAjB,EAAqD;AAEjD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;;AAEA,WAASU,WAAT,GAAsB;AAClBL,IAAAA,SAAS,CAAC,OAAD,CAAT;AACH;;AAEDJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,IAAI,GAAE,IAAIC,IAAJ,EAAV;AACAH,IAAAA,UAAU,CAACE,IAAD,CAAV;AACH,GAHQ,EAGP,EAHO,CAAT;AAKA,MAAIE,EAAE,GAAGL,OAAO,GAAGF,SAAnB;AAEA,MAAIQ,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,KAAhB,CAAV,CAfiD,CAiBjD;;AACA,MAAII,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,KAAL,GAAa,IAAxB,CAAV,CAlBiD,CAoBjD;;AACA,MAAIK,OAAO,GAAGL,EAAE,GAAG,IAAnB,CArBiD,CAuBjD;;AACAC,EAAAA,GAAG,GAAG,CAAC,MAAMA,GAAP,EAAYK,KAAZ,CAAkB,CAAC,CAAnB,CAAN;AACAF,EAAAA,GAAG,GAAG,CAAC,MAAMA,GAAP,EAAYE,KAAZ,CAAkB,CAAC,CAAnB,CAAN;AACAD,EAAAA,OAAO,GAAG,CAAC,MAAMA,OAAP,EAAgBC,KAAhB,CAAsB,CAAC,CAAvB,CAAV;AAEA,MAAIC,KAAK,GAAGN,GAAG,GAAG,GAAN,GAAYG,GAAZ,GAAkB,GAAlB,GAAwBC,OAApC,CA5BiD,CA8BjD;;AACA,MAAIG,SAAS,GAAG,KAAGJ,GAAnB;AACA,MAAIK,cAAc,GAAGP,IAAI,CAACQ,KAAL,CAAWF,SAAS,GAAC,EAArB,IAAyB,EAA9C,CAhCiD,CAkCjD;;AACA,MAAIG,YAAY,GAAI,MAAIjB,SAAS,GAAC,EAAd,CAAD,GAAoB,GAAvC;AACA,MAAIkB,iBAAiB,GAAGV,IAAI,CAACQ,KAAL,CAAWC,YAAY,GAAC,EAAxB,IAA4B,EAApD;AAED,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAI,mBAAY,QAAhB;AACI,IAAA,KAAK,EAAE;AACHE,MAAAA,KAAK,EAAC,OADH;AAEHC,MAAAA,QAAQ,EAAC,MAFN;AAGHC,MAAAA,UAAU,EAAC,KAHR;AAIHC,MAAAA,MAAM,EAAC;AAJJ,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAUA;AAAI,mBAAY,YAAhB;AACI,IAAA,KAAK,EAAE;AACPH,MAAAA,KAAK,EAAC,OADC;AAEPC,MAAAA,QAAQ,EAAC,MAFF;AAGPG,MAAAA,SAAS,EAAC,MAHH;AAIPD,MAAAA,MAAM,EAAC,YAJA;AAKPE,MAAAA,OAAO,EAAC;AALD,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAU,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWX,KAAX,CAAV,CARR,eASQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAAc,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWE,cAAX,CAAd,kBATR,eAUQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAY,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWf,SAAX,CAAZ,CAVR,eAWQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAS,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAWkB,iBAAX,CAAT,MAXR,CAVA,eAuBA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,4CAAb;AAAuB,IAAA,OAAO,EAAEf,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBA,CADD;AA2BF;;AAED,MAAMsB,QAAQ,GAAG7B,MAAM,CAAC8B,IAAK;;;EAA7B;AAKA,eAAe7B,MAAf","sourcesContent":["import React,{ useState, useEffect }  from 'react';\nimport Button from './Button.js';\nimport styled from 'styled-components'\n\n//round=四捨五入しているという意味\n\nfunction Result( {setScreen, beginTime, missCount} ) {\n\n    const [endTime, setEndTime] = useState('');\n\n    function handleClick(){\n        setScreen('start');\n    }\n\n    useEffect(() => {\n        let date= new Date();\n        setEndTime(date)\n    },[])\n\n    let ms = endTime - beginTime \n\n    let min = Math.floor(ms / 60000);\n\n    //秒数 = 60000ミリ秒で割り1000(ミリ秒なので1000で掛ける)\n    let sec = Math.floor(ms % 60000 / 1000);\n\n    //四捨五入されたミリ秒 = 135200ミリ秒を1000ミリ秒で割った数の余り\n    let roundMs = ms % 1000;\n\n    //表示の際の桁数を固定する 例）3 => 03、12 => 12\n    min = ('0' + min).slice(-2); \n    sec = ('0' + sec).slice(-2);\n    roundMs = ('0' + roundMs).slice(-2);\n\n    let timer = min + ':' + sec + ':' + roundMs;\n\n    //タイプスピード(１秒間にタイプできる数)＝ 10問を経過時間で割った数\n    let typeSpeed = 10/sec\n    let roundTypeSpeed = Math.round(typeSpeed*10)/10;\n\n    //正確率 = 10問を、ミスタイプ数 + 正解数(10)で割り、100掛けて％表示\n    let accuracyRate = (10/(missCount+10))*100;\n    let roundAccuracyRate = Math.round(accuracyRate*10)/10;\n\n   return(\n    <div>\n    <h1 data-testid=\"result\"\n        style={{\n            color:\"white\", \n            fontSize:\"50px\", \n            fontWeight:\"800\",\n            margin:\"70px 0\"\n            }}>\n            結果\n    </h1>\n    <ul data-testid=\"resultlist\"\n        style={{\n        color:\"white\", \n        fontSize:\"20px\", \n        textAlign:\"left\", \n        margin:\"30px 100px\", \n        display:\"inline-block\"\n        }}>\n            <li>経過時間: <BlueText>{timer}</BlueText></li>\n            <li>平均キータイプ数: <BlueText>{roundTypeSpeed}</BlueText>回/秒</li>\n            <li>ミスタイプ数: <BlueText>{missCount}</BlueText></li>\n            <li>正確率: <BlueText>{roundAccuracyRate}</BlueText>%</li>\n    </ul>\n    <Button text=\"タイトルに戻る\" onClick={handleClick}/>\n</div>\n    );\n}\n\nconst BlueText = styled.span`\n    color:#10639C;\n    font-weight:800;\n}`\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}